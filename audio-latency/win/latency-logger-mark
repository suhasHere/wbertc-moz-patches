# HG changeset patch
# Parent e2bd74a73a716aee99bd0fcc12d2a5f43d024efb
# User Paul Adenot <paul@paul.cx>
 Bug 904617 Added the possibility to mark a location in the log

diff --git a/content/media/AudioStream.cpp b/content/media/AudioStream.cpp
--- a/content/media/AudioStream.cpp
+++ b/content/media/AudioStream.cpp
@@ -574,17 +574,17 @@ BufferedAudioStream::Init(int32_t aNumCh
 
   if (!mCubebStream) {
     return NS_ERROR_FAILURE;
   }
 
   // Size mBuffer for one second of audio.  This value is arbitrary, and was
   // selected based on the observed behaviour of the existing AudioStream
   // implementations.
-  uint32_t bufferLimit = FramesToBytes(aRate);
+  uint32_t bufferLimit = FramesToBytes(aRate / 10);
   NS_ABORT_IF_FALSE(bufferLimit % mBytesPerFrame == 0, "Must buffer complete frames");
   mBuffer.SetCapacity(bufferLimit);
 
   return NS_OK;
 }
 
 void
 BufferedAudioStream::Shutdown()
@@ -881,16 +881,26 @@ BufferedAudioStream::DataCallback(void* 
     float scaled_volume = float(GetVolumeScale() * mVolume);
 
     ScaleAudioSamples(output, aFrames * mChannels, scaled_volume);
 
     NS_ABORT_IF_FALSE(mBuffer.Length() % mBytesPerFrame == 0, "Must copy complete frames");
 
     // Notify any blocked Write() call that more space is available in mBuffer.
     mon.NotifyAll();
+    bool isSilence = true;
+    for (uint32_t i = 0; i < servicedFrames; i++) {
+      if (output[i] != 0.0f) {
+        isSilence = false;
+        break;
+      }
+    }
+    if (isSilence) {
+      LogLatency(AsyncLatencyLogger::AudioStream, "Buffer is silent");
+    }
   }
 
   underrunFrames = aFrames - servicedFrames;
 
   if (mState != DRAINING) {
     uint8_t* rpos = static_cast<uint8_t*>(aBuffer) + FramesToBytes(aFrames - underrunFrames);
     memset(rpos, 0, FramesToBytes(underrunFrames));
 #ifdef PR_LOGGING
diff --git a/content/media/Latency.cpp b/content/media/Latency.cpp
--- a/content/media/Latency.cpp
+++ b/content/media/Latency.cpp
@@ -5,47 +5,64 @@
 #include <algorithm>
 
 using namespace mozilla;
 
 const char* LatencyLogIndex2Strings[] = {
   "MediaStream",
   "Cubeb",
   "AudioStream",
-  "NetStat"
+  "NetStat",
+  "AudioBufferSourceNode"
 };
 
 AsyncLatencyLogger* gAsyncLogger = nullptr;
 mozilla::Monitor* AsyncLatencyLogger::mMonitor = nullptr;
 
 class LogEvent : public nsRunnable
 {
 public:
   LogEvent(AsyncLatencyLogger::LatencyLogIndex aIndex, double aValue) :
     mIndex(aIndex),
-    mValue(aValue)
+    mValue(aValue),
+    mMsg(nullptr)
+  {}
+  LogEvent(AsyncLatencyLogger::LatencyLogIndex aIndex, const char* aMsg) :
+    mIndex(aIndex),
+    mValue(0),
+    mMsg(aMsg)
   {}
   ~LogEvent() {}
 
   NS_IMETHOD Run() {
-    AsyncLatencyLogger::Get(true)->WriteLog(mIndex, mValue);
+    if (mMsg == nullptr) {
+      AsyncLatencyLogger::Get(true)->WriteLog(mIndex, mValue);
+    } else {
+      AsyncLatencyLogger::Get(true)->WriteLog(mIndex, mMsg);
+    }
     return NS_OK;
   }
 
 protected:
   AsyncLatencyLogger::LatencyLogIndex mIndex;
   double mValue;
+  const char* mMsg;
 };
 
 // This is the only function that clients should use.
 void LogLatency(AsyncLatencyLogger::LatencyLogIndex aIndex, double aValue)
 {
   AsyncLatencyLogger::Get()->Log(aIndex, aValue);
 }
 
+void LogLatency(AsyncLatencyLogger::LatencyLogIndex aIndex, const char* msg)
+{
+  AsyncLatencyLogger::Get()->Log(aIndex, msg);
+}
+
 void AsyncLatencyLogger::InitializeStatics()
 {
   AsyncLatencyLogger::mMonitor = new Monitor("MediaLatencyLogMonitor");
 }
 
 void AsyncLatencyLogger::Shutdown()
 {
   delete mMonitor;
@@ -93,22 +110,35 @@ void AsyncLatencyLogger::Init()
   NS_ENSURE_SUCCESS(rv,);
 }
 
 void AsyncLatencyLogger::WriteLog(LatencyLogIndex aIndex, double aValue)
 {
   PR_LOG(mMediaLatencyLog, PR_LOG_DEBUG, ("%s,%lf,%lf", LatencyLogIndex2Strings[aIndex], GetTimeStamp(), aValue));
 }
 
+void AsyncLatencyLogger::WriteLog(LatencyLogIndex aIndex, const char* aMsg)
+{
+  PR_LOG(mMediaLatencyLog, PR_LOG_DEBUG, ("#%s,%lf,%s", LatencyLogIndex2Strings[aIndex], GetTimeStamp(), aMsg));
+}
+
 double AsyncLatencyLogger::GetTimeStamp()
 {
   TimeDuration t = TimeStamp::Now() - mStart;
   return t.ToMilliseconds();
 }
 
 void AsyncLatencyLogger::Log(LatencyLogIndex aIndex, double aValue)
 {
   nsCOMPtr<nsIRunnable> event = new LogEvent(aIndex, aValue);
   if (mThread) {
     mThread->Dispatch(event, NS_DISPATCH_NORMAL);
   }
 }
 
+void AsyncLatencyLogger::Log(LatencyLogIndex aIndex, const char* aValue)
+{
+  nsCOMPtr<nsIRunnable> event = new LogEvent(aIndex, aValue);
+  if (mThread) {
+    mThread->Dispatch(event, NS_DISPATCH_NORMAL);
+  }
+}
+
diff --git a/content/media/Latency.h b/content/media/Latency.h
--- a/content/media/Latency.h
+++ b/content/media/Latency.h
@@ -17,20 +17,23 @@ class AsyncLatencyLogger
 {
     NS_INLINE_DECL_THREADSAFE_REFCOUNTING(AsyncLatencyLogger);
     public:
       enum LatencyLogIndex {
           MediaStream,
           Cubeb,
           AudioStream,
           NetEQ,
+          AudioBufferSourceNode,
           _MAX_INDEX
       };
       void Log(LatencyLogIndex index, double value);
+      void Log(LatencyLogIndex index, const char* msg);
       void WriteLog(LatencyLogIndex index, double value);
+      void WriteLog(LatencyLogIndex index, const char* value);
 
       static AsyncLatencyLogger* Get(bool aStartTimer = false);
       static void InitializeStatics();
       static void Shutdown();
     private:
       AsyncLatencyLogger();
       ~AsyncLatencyLogger();
       double GetTimeStamp();
@@ -44,10 +47,11 @@ class AsyncLatencyLogger
       PRLogModuleInfo* mMediaLatencyLog;
       // This monitor protects mStart and mMediaLatencyLog for the
       // initialization sequence. It is initialized at layout startup, and
       // destroyed at layout shutdown.
       static mozilla::Monitor* mMonitor;
 };
 
 void LogLatency(AsyncLatencyLogger::LatencyLogIndex index, double value);
+void LogLatency(AsyncLatencyLogger::LatencyLogIndex index, char const* msg);
 
 #endif
diff --git a/content/media/MediaStreamGraph.cpp b/content/media/MediaStreamGraph.cpp
--- a/content/media/MediaStreamGraph.cpp
+++ b/content/media/MediaStreamGraph.cpp
@@ -785,16 +785,17 @@ MediaStreamGraphImpl::PlayAudio(MediaStr
         // the amount of silent samples we've inserted for blocking never gets
         // more than one sample away from the ideal amount.
         TrackTicks startTicks =
             TimeToTicksRoundDown(track->GetRate(), audioOutput.mBlockedAudioTime);
         audioOutput.mBlockedAudioTime += end - t;
         TrackTicks endTicks =
             TimeToTicksRoundDown(track->GetRate(), audioOutput.mBlockedAudioTime);
 
+        LogLatency(AsyncLatencyLogger::MediaStream, "Writing silence");
         output.InsertNullDataAtStart(endTicks - startTicks);
         LOG(PR_LOG_DEBUG+1, ("MediaStream %p writing blocking-silence samples for %f to %f",
                              aStream, MediaTimeToSeconds(t), MediaTimeToSeconds(end)));
       } else {
         TrackTicks startTicks =
             track->TimeToTicksRoundDown(GraphTimeToStreamTime(aStream, t));
         TrackTicks endTicks =
             track->TimeToTicksRoundDown(GraphTimeToStreamTime(aStream, end));
@@ -806,16 +807,17 @@ MediaStreamGraphImpl::PlayAudio(MediaStr
         TrackTicks sliceEnd = std::min(endTicks, audio->GetDuration());
         if (sliceEnd > startTicks) {
           output.AppendSlice(*audio, startTicks, sliceEnd);
         }
         // Play silence where the track has ended
         output.AppendNullData(endTicks - sliceEnd);
         NS_ASSERTION(endTicks == sliceEnd || track->IsEnded(),
                      "Ran out of data but track not ended?");
+        LogLatency(AsyncLatencyLogger::MediaStream, "Writing real data.");
         output.ApplyVolume(volume);
         LOG(PR_LOG_DEBUG+1, ("MediaStream %p writing samples for %f to %f (samples %lld to %lld)",
                              aStream, MediaTimeToSeconds(t), MediaTimeToSeconds(end),
                              startTicks, endTicks));
       }
       output.WriteTo(audioOutput.mStream);
       t = end;
     }
